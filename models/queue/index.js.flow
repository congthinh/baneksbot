// @flow

declare type Rule = {
  rate: number,
  limit: number,
  priority: number
}

declare type BackOffFunction = (delay: number) => void;
declare type Request = (BackOffFunction) => Promise<any>;
declare type Callback = (error: ?Error, data: any) => void;

declare type QueueItemData = {
  request: Request,
  callback: Callback
}

declare type QueueItem = {
  cooldown: number,
  key: string,
  data: QueueItemData[],
  rule: Rule
}

declare type ShiftItemStructure = {
  queue: QueueItem,
  item: QueueItemData
}

declare export default class Queue {
  createQueue(queueName: string, request: Request, callback: Callback, rule: Rule): QueueItem;
  getRule(name: string, params?: {}): Rule;
  addBackOff(item: ShiftItemStructure, delay: number): void;
  execute(): Promise<boolean | QueueItem>;
  shift(): ShiftItemStructure;
  heat(): void;
  findMostImportant(bestQueue?: QueueItem): QueueItem;
  setCooldown(queue: QueueItem): void;
  delay(time: number): Promise<void>;
  isCool(queue: QueueItem): boolean;
  remove(key: string): boolean;
  request(fn: Request, key?: string, rule?: string): Promise<any>;
  get isOverheated(): boolean;
  get getTotalLength(): number;
}
